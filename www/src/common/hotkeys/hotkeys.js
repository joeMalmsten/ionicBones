/*global angular require*/
'use strict';
require('../../../../node_modules/angular-hotkeys/build/hotkeys');

/**
 * Provides a factory that handles the keybindings for our app
 *
 * Dependencies: cfp.hotkeys(third party)
 *
 * @module app.hotkeys
 */
angular.module('app.hotkeys', ['cfp.hotkeys'])

/**
 * A factory than contains the logic to handle hotkeys
 *
 * @class hotkeysFactory
 * @constructor
 * @param {Object} hotkeys
 *  A third party library for javascript hotkey management.
 */
.factory('hotkeysFactory', ['hotkeys', function (hotkeys) {
    var self = {
            keybindings: {}
        },
        $ = require('jquery'),
        _ = require('lodash'),
        documentElem = $(document);

    /**
     * the default function that is called when a hotkey is pressed
     *
     * @method defaultCallback
     * @param {Object} event
     *  The event that triggered the callback
     * @param {Object} hotkey
     *  The hotkey object generated by the third party hotkeys library
     * @return none
     */
    function defaultCallback(event, hotkey) {
        var keyCombo = '';

        // For multiple Keypresses, e.eg.
        //  shift + ctrl keys would be 'shiftKeyctrlKey'
        _.each(hotkey.combo, function(value) {
            keyCombo += value + 'Key';
        });
        self.keybindings[keyCombo] = true;
        documentElem.on('keyup', function(event) {
            if (event.which === 16) {
                self.keybindings[keyCombo] = false;
                documentElem.off('keyup');
            }
        });
    }

    /**
     * binds a key combo to a scope and assigns is a callback when the combo
     * is used.
     *
     * @method self.bind
     * @param {String} combo
     *  The keystroke combo being bound
     * @param {Object} scope
     *  The isolate scope we want this keybinding to apply to
     * @param {Function} [cb]
     *  The function to be called when the combo is used, if set overrides
     * defaultCallback()
     * @param {String} [desc]
     *  Optional strng describing the keybinding
     * @return none
     */
    self.bind = function(combo, scope, cb, desc) {
        hotkeys.bindTo(scope)
        .add({
            combo: combo,
            description: desc,
            callback: cb || defaultCallback
        });
    };

    /**
     * unbinds a currently bound keybinding
     *
     * @method self.bind
     * @param {String} combo
     *  The keystroke combo being unbound
     * @return none
     */
    self.unbind = function(combo) {
        hotkeys.del(combo);
    };

    return self;
}]);
